/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ebrp;

import java.util.ArrayList;

/**
 *
 * @author time
 */
public class ebrpPublication extends Publication {

    String fieldName=SUNSET;
    JournalWithASJC journal;
    String title=SUNSET;
    /**
     * Array of user keywords provided by author
     */
    String [] authorKeyword;
    String documentType=SUNSET;
    /**
     * List of key words generated by user.
     * Typically these may be stemmed, stopped and filtered from title 
     * and author userKeywordList.
     */
    ArrayList<String> userKeywordList;



//    String [] columnLabels={"eid","fieldname","journal_title",
//    "scopus_source_id","publication_year","article_title",
//    "author_keywords","citations_as_of_may01_2012","bibliography_length",
//    "document_type"};

    ebrpPublication(String [] columnList){
        sectionNumber = new ArrayList();
        String scopusSourceID="";
        String journalTitle="";
        switch (Math.min(columnList.length-1,9)){
            case 9: documentType =columnList[9];
            case 8:
                try { ref = Integer.parseInt(columnList[8]);}
                catch(RuntimeException e){ref=IUNSET;}
            case 7: 
                try { cite = Integer.parseInt(columnList[7]);}
                catch(RuntimeException e){cite=IUNSET;}
            case 6: authorKeyword=columnList[6].split("\\|"); // this splits at |
            case 5: title=columnList[5];
            case 4: 
                try { year = Integer.parseInt(columnList[4]);}
                catch(RuntimeException e){year=IUNSET;}
            case 3: scopusSourceID=columnList[3];
            case 2: journalTitle=columnList[2];
                    journal = new JournalWithASJC();
                    journal.setTitle(journalTitle);
                    journal.setDataID(scopusSourceID);
            case 1: fieldName = columnList[1];
            case 0: eid=columnList[0]; break;
            default:
        }
        
        
    }

    /**
     * Get journal of publication.
     * @return journal of publication
     */
    public JournalWithASJC getJournal(){return journal;}

    /**
     * Sets journal of publication
     * @param j journal
     */
    public void setJournal(JournalWithASJC j){journal=j;}

    public String getTitle(){return title;}
    public void setTitle(String t){title=t;}

    static public String toStringShortLabel(String sep){return "id"+sep+"eid"+sep+"year"+sep+"date"+sep+"no.authors"+sep+"cite"+sep+"ref";}
    public String toStringShort(String sep){return id+sep+eid+sep+year+sep+date+sep+getNumberAuthors()+sep+cite+sep+ref;}

    /**
     * Get number of author provided keywords.
     * @see #userKeywordList
     */
    public int getNumberAuthorKeywords(){return authorKeyword.length;}
    /**
     * Get list of key words provided by author.
     * Typically these are direct from source file.
     * @see #authorKeyword
     */
    public String [] getAuthorKeywordArray(){return this.authorKeyword;}
    /**
     * Get list of key words provided by author.
     * Typically these are direct from source file.
     * @see #authorKeyword
     */
    public void setAuthorKeywordArray(String [] aka){System.arraycopy(aka, 0, authorKeyword, 0, aka.length);}
    /**
     * tests existence of user generated keywords.
     * @return true if has any user generated keywords
     * @see #userKeywordList
     */
    public boolean hasUserKeywords(){
        return (((userKeywordList==null) || (userKeywordList.isEmpty() ))?false:true);
    }
    /**
     * Get number of user generated keywords.
     * @return number of user generated keywords
     * @see #userKeywordList
     */
    public int getNumberUserKeywords(){return (hasUserKeywords()?userKeywordList.size():0);}
    /**
     * Get list of key words generated by user.
     * Typically these may be stemmed, stopped and filtered from title
     * and author userKeywordList.
     * @return list of user generated keywords
     * @see #userKeywordList
     */
    public ArrayList<String> getUserKeywordList(){return (hasUserKeywords()?this.userKeywordList:null);}
    /**
     * Set list of key words generated by user.
     * Typically these may be stemmed, stopped and filtered from title
     * and author userKeywordList.
     * @param ukl list of user generated keywords
     * @see #userKeywordList
     */
    public void setUserKeywordList(ArrayList<String> ukl){userKeywordList=ukl;}

    /**
     * Compares two publications using external id string.
     * @param otherPublication other publication
     * @return tests external id
     * @see #compareToExternalID(ebrp.Publication)
     */
    @Override
    public int compareTo(Publication otherPublication){
        return compareToExternalID(otherPublication);
    }

    /**
     * Compares two publications using external id string.
     * Ignores case by using standard String compareToIgnoreCase result.
     * @param otherPublication other publication
     * @return standard String compareToIgnoreCase result.
     */
    @Override
    public int compareToExternalID(Publication otherPublication){
        return eid.compareToIgnoreCase(otherPublication.eid);
    }



}
